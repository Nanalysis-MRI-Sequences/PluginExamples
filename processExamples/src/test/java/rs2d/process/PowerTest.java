package rs2d.process;

import org.junit.Assert;
import org.junit.Test;
import rs2d.spinlab.data.DataSetInterface;
import rs2d.spinlab.data.simulation.MriEllipsoidDatasetSimulator;
import rs2d.spinlab.tools.param.MriDefaultParams;

public class PowerTest {
    private static final float[][] expectedPower = {
            {6.21282418e-06f, 9.68899019e-07f, 6.59568893e-06f, 1.97617866e-05f,2.81338499e-05f, 2.48069576e-05f, 1.73884511e-05f, 1.58651223e-05f, 2.03716500e-05f, 2.47766517e-05f, 1.72664116e-05f, 6.60771100e-06f,1.17344259e-05f, 6.07194700e-06f, 6.60723133e-06f, 2.46012893e-05f},
            {4.69745541e-06f, 5.60378679e-06f, 1.56184381e-05f, 1.46126822e-05f,1.27864696e-05f, 2.34766130e-05f, 2.48260006e-05f, 2.37200830e-05f, 2.95295271e-05f, 3.42684440e-05f, 2.98533487e-05f, 2.19414917e-05f,1.03232059e-05f, 3.14237155e-06f, 4.48728862e-06f, 5.81286803e-07f},
            {9.78901661e-06f, 2.69002887e-05f, 5.12300769e-05f, 4.31411734e-05f,3.17455006e-05f, 6.00297927e-05f, 5.08664216e-05f, 3.24375848e-05f,2.74107681e-05f, 5.75349346e-05f, 9.80253525e-05f, 5.32048840e-05f,2.37197315e-05f, 4.05384952e-05f, 1.47030273e-05f, 1.39632229e-05f},
            {3.32438360e-05f, 4.76880823e-05f, 5.48604912e-07f, 1.53413331e-05f,6.86668013e-05f, 2.22201296e-04f, 1.08716309e-04f, 2.33414373e-05f,3.32296720e-05f, 1.43918575e-04f, 2.00931835e-04f, 2.75892515e-05f,9.82483833e-05f, 2.11945352e-05f, 4.04688781e-05f, 1.14817929e-05f},
            {1.49384028e-05f, 3.58182795e-05f, 1.69311123e-05f, 2.68023916e-04f,5.26272302e-05f, 3.00690830e-04f, 5.18903289e-04f, 2.80954040e-04f,2.60545928e-04f, 4.69517853e-04f, 2.91628794e-04f, 2.24149348e-05f,1.32918761e-04f, 5.42305892e-05f, 3.70767063e-05f, 7.05866804e-05f},
            {2.16224670e-05f, 7.00739204e-05f, 1.76447263e-04f, 6.42764887e-05f,7.28980390e-04f, 4.06917613e-04f, 2.93990196e-03f, 2.50804974e-03f,2.40163863e-03f, 2.84570307e-03f, 5.23306936e-04f, 6.04716244e-04f,5.98817480e-05f, 1.59891796e-04f, 8.71793298e-05f, 1.62813529e-05f},
            {1.09991591e-04f, 3.30281107e-05f, 5.34770387e-05f, 1.24373519e-03f,2.39505641e-04f, 6.67920475e-04f, 4.15277463e-03f, 4.21764786e-03f,4.43135885e-03f, 4.37968019e-03f, 6.41263361e-04f, 3.98612405e-04f,9.25686681e-04f, 1.23080338e-04f, 8.99246347e-05f, 7.93371978e-05f},
            {9.60361196e-05f, 2.10555001e-04f, 4.68505557e-05f, 8.21343826e-04f,6.73000777e-04f, 5.37110532e-03f, 2.97934141e-04f, 2.26978881e-01f,2.25897782e-01f, 1.84306523e-05f, 5.09202901e-03f, 8.09421683e-04f,6.67657837e-04f, 6.66222588e-05f, 2.46444176e-04f, 9.40208850e-05f},
            {9.40208850e-05f, 2.46444176e-04f, 6.66222588e-05f, 6.67657837e-04f,8.09421683e-04f, 5.09202901e-03f, 1.84306523e-05f, 2.25897782e-01f,2.26978881e-01f, 2.97934141e-04f, 5.37110532e-03f, 6.73000777e-04f,8.21343826e-04f, 4.68505557e-05f, 2.10555001e-04f, 9.60361196e-05f},
            {7.93371978e-05f, 8.99246347e-05f, 1.23080338e-04f, 9.25686681e-04f,3.98612405e-04f, 6.41263361e-04f, 4.37968019e-03f, 4.43135885e-03f,4.21764786e-03f, 4.15277463e-03f, 6.67920475e-04f, 2.39505641e-04f,1.24373519e-03f, 5.34770387e-05f, 3.30281107e-05f, 1.09991591e-04f},
            {1.62813529e-05f, 8.71793298e-05f, 1.59891796e-04f, 5.98817480e-05f,6.04716244e-04f, 5.23306936e-04f, 2.84570307e-03f, 2.40163863e-03f,2.50804974e-03f, 2.93990196e-03f, 4.06917613e-04f, 7.28980390e-04f,6.42764887e-05f, 1.76447263e-04f, 7.00739204e-05f, 2.16224670e-05f},
            {7.05866804e-05f, 3.70767063e-05f, 5.42305892e-05f, 1.32918761e-04f,2.24149348e-05f, 2.91628794e-04f, 4.69517853e-04f, 2.60545928e-04f,2.80954040e-04f, 5.18903289e-04f, 3.00690830e-04f, 5.26272302e-05f,2.68023916e-04f, 1.69311123e-05f, 3.58182795e-05f, 1.49384028e-05f},
            {1.14817929e-05f, 4.04688781e-05f, 2.11945352e-05f, 9.82483833e-05f,2.75892515e-05f, 2.00931835e-04f, 1.43918575e-04f, 3.32296720e-05f,2.33414373e-05f, 1.08716309e-04f, 2.22201296e-04f, 6.86668013e-05f,1.53413331e-05f, 5.48604912e-07f, 4.76880823e-05f, 3.32438360e-05f},
            {1.39632229e-05f, 1.47030273e-05f, 4.05384952e-05f, 2.37197315e-05f,5.32048840e-05f, 9.80253525e-05f, 5.75349346e-05f, 2.74107681e-05f,3.24375848e-05f, 5.08664216e-05f, 6.00297927e-05f, 3.17455006e-05f,4.31411734e-05f, 5.12300769e-05f, 2.69002887e-05f, 9.78901661e-06f},
            {5.81286803e-07f, 4.48728862e-06f, 3.14237155e-06f, 1.03232059e-05f,2.19414917e-05f, 2.98533487e-05f, 3.42684440e-05f, 2.95295271e-05f,2.37200830e-05f, 2.48260006e-05f, 2.34766130e-05f, 1.27864696e-05f,1.46126822e-05f, 1.56184381e-05f, 5.60378679e-06f, 4.69745541e-06f},
            {2.46012893e-05f, 6.60723133e-06f, 6.07194700e-06f, 1.17344259e-05f,6.60771100e-06f, 1.72664116e-05f, 2.47766517e-05f, 2.03716500e-05f,1.58651223e-05f, 1.73884511e-05f, 2.48069576e-05f, 2.81338499e-05f,1.97617866e-05f, 6.59568893e-06f, 9.68899019e-07f, 6.21282418e-06f}
    };

    @Test
    public void testPower() {
        MriEllipsoidDatasetSimulator simulator = new MriEllipsoidDatasetSimulator();
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_1D.name()).setValue(16);
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_2D.name()).setValue(16);
        DataSetInterface dataset = simulator.simulate();

        Power process = new Power(dataset);
        process.execute(process.getParam());

        float[][] real = dataset.getData(0).getRealPart()[0][0];
        float[][] imag = dataset.getData(0).getImaginaryPart()[0][0];

        for (int i = 0; i < real.length; i++) {
            Assert.assertArrayEquals(String.format("Test power process for real part (line %d)", i),
                    PowerTest.expectedPower[i], real[i], 1e-7f);
            Assert.assertArrayEquals(String.format("Test power process for imaginary part (line %d)", i),
                    new float[imag[i].length], imag[i], 1e-7f);
        }
    }
}
