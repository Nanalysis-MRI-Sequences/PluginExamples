package rs2d.process;

import org.junit.Assert;
import org.junit.Test;
import rs2d.spinlab.data.DataSetInterface;
import rs2d.spinlab.data.simulation.MriEllipsoidDatasetSimulator;
import rs2d.spinlab.tools.param.MriDefaultParams;
import rs2d.spinlab.tools.param.Param;

public class PhaseImageTest {
    private static float[][] expectedPhaseWithFourQuadrant = {
            { 1.97886563f,  2.40282539f, -1.76739636f, -2.25229159f, -2.79521084f, 3.05096541f,  2.66951783f,  2.47551698f,  2.54647466f,  2.71472513f, 2.99968097f, -2.38778387f, -1.25062323f, -0.722462f,  1.9626308f, 2.23604289f},
            {-0.35841557f, -1.64309418f,  3.07095156f,  2.25655549f,  0.99138863f, 0.30871293f, -0.05013007f, -0.43188339f, -0.72775196f, -0.70109251f,-0.29759972f,  0.38163755f,  1.28209322f,  2.75323847f, -1.79297684f,-2.64150461f},
            { 3.03483164f,  1.88269302f,  0.51106826f, -0.36950642f, -1.84423483f,-2.63902885f, -3.06222352f,  3.0044415f, -3.01356208f, -2.61354936f,-2.41914281f, -2.05662167f, -0.48366955f,  0.51054674f,  1.9947936f,-2.86855707f},
            { 1.95525924f,  0.60265827f, -2.89617393f,  2.86741926f,  0.48801408f, 0.21745469f,  0.06623661f, -0.10814482f,  0.05015681f,  0.2060968f, 0.34068177f,  1.06742057f,  3.045069f, -2.85762751f,  0.28524882f, 1.36276551f},
            { 0.58711004f, -3.02121012f,  2.55627383f,  0.24898182f, -0.07737096f,-2.85281435f, -2.90049548f, -2.92528235f, -3.08397411f,  3.1164872f, 3.12200582f,  0.34397547f,  0.3034133f,  3.08784208f, -2.65464875f, 0.07264198f},
            {-2.69211733f, -2.89643782f, -0.12658023f, -2.62829147f,  3.0996335f, 0.49437738f,  0.16054108f,  0.06498067f,  0.09253302f,  0.22458284f, 0.61012903f,  3.01489743f, -2.50115709f, -0.36904004f, -2.53569985f,-1.29734313f},
            {-2.96159293f, -0.26692729f, -0.66346964f, -3.08827044f,  0.8109639f, 0.66117829f,  2.99769447f,  3.06295853f,  3.11498052f,  3.10120005f, 0.49249256f,  0.59279257f, -3.06404887f, -0.90976952f, -0.92837079f,-2.4755698f},
            { 3.04402146f,  0.14435516f, -3.11572392f,  3.10948232f,  0.28319476f, 2.98393262f,  1.25708152f,  0.04537013f,  0.02952748f,  0.16817567f, 3.13579985f,  0.17326081f,  3.12270627f, -2.39045821f, -0.42006266f,-2.70396978f},
            { 2.70396978f,  0.42006266f,  2.39045821f, -3.12270627f, -0.17326081f,-3.13579985f, -0.16817567f, -0.02952748f, -0.04537013f, -1.25708152f,-2.98393262f, -0.28319476f, -3.10948232f,  3.11572392f, -0.14435516f,-3.04402146f},
            { 2.4755698f,  0.92837079f,  0.90976952f,  3.06404887f, -0.59279257f,-0.49249256f, -3.10120005f, -3.11498052f, -3.06295853f, -2.99769447f,-0.66117829f, -0.8109639f,  3.08827044f,  0.66346964f,  0.26692729f, 2.96159293f},
            { 1.29734313f,  2.53569985f,  0.36904004f,  2.50115709f, -3.01489743f,-0.61012903f, -0.22458284f, -0.09253302f, -0.06498067f, -0.16054108f,-0.49437738f, -3.0996335f,  2.62829147f,  0.12658023f,  2.89643782f, 2.69211733f},
            {-0.07264198f,  2.65464875f, -3.08784208f, -0.3034133f, -0.34397547f,-3.12200582f, -3.1164872f,  3.08397411f,  2.92528235f,  2.90049548f, 2.85281435f,  0.07737096f, -0.24898182f, -2.55627383f,  3.02121012f,-0.58711004f},
            {-1.36276551f, -0.28524882f,  2.85762751f, -3.045069f, -1.06742057f,-0.34068177f, -0.2060968f, -0.05015681f,  0.10814482f, -0.06623661f,-0.21745469f, -0.48801408f, -2.86741926f,  2.89617393f, -0.60265827f,-1.95525924f},
            { 2.86855707f, -1.9947936f, -0.51054674f,  0.48366955f,  2.05662167f, 2.41914281f,  2.61354936f,  3.01356208f, -3.0044415f,  3.06222352f, 2.63902885f,  1.84423483f,  0.36950642f, -0.51106826f, -1.88269302f,-3.03483164f},
            { 2.64150461f,  1.79297684f, -2.75323847f, -1.28209322f, -0.38163755f, 0.29759972f,  0.70109251f,  0.72775196f,  0.43188339f,  0.05013007f,-0.30871293f, -0.99138863f, -2.25655549f, -3.07095156f,  1.64309418f, 0.35841557f},
            {-2.23604289f, -1.9626308f,  0.722462f,  1.25062323f,  2.38778387f,-2.99968097f, -2.71472513f, -2.54647466f, -2.47551698f, -2.66951783f,-3.05096541f,  2.79521084f,  2.25229159f,  1.76739636f, -2.40282539f,-1.97886563f}
    };

    private static float[][] expectedPhaseWithoutFourQuadrant = {
            { 1.97886563f,  2.40282539f,  4.51578895f,  4.03089372f,  3.48797447f, 3.05096541f,  2.66951783f,  2.47551698f,  2.54647466f,  2.71472513f, 2.99968097f,  3.89540143f, -1.25062323f, -0.722462f,  1.9626308f, 2.23604289f},
            {-0.35841557f,  4.64009112f,  3.07095156f,  2.25655549f,  0.99138863f, 0.30871293f, -0.05013007f, -0.43188339f, -0.72775196f, -0.70109251f,-0.29759972f,  0.38163755f,  1.28209322f,  2.75323847f,  4.49020846f, 3.64168069f},
            { 3.03483164f,  1.88269302f,  0.51106826f, -0.36950642f,  4.43895048f, 3.64415646f,  3.22096179f,  3.0044415f,  3.26962323f,  3.66963594f, 3.8640425f,  4.22656364f, -0.48366955f,  0.51054674f,  1.9947936f, 3.41462824f},
            { 1.95525924f,  0.60265827f,  3.38701138f,  2.86741926f,  0.48801408f, 0.21745469f,  0.06623661f, -0.10814482f,  0.05015681f,  0.2060968f, 0.34068177f,  1.06742057f,  3.045069f,  3.4255578f,  0.28524882f, 1.36276551f},
            { 0.58711004f,  3.26197519f,  2.55627383f,  0.24898182f, -0.07737096f, 3.43037096f,  3.38268983f,  3.35790296f,  3.1992112f,  3.1164872f, 3.12200582f,  0.34397547f,  0.3034133f,  3.08784208f,  3.62853656f, 0.07264198f},
            { 3.59106798f,  3.38674748f, -0.12658023f,  3.65489383f,  3.0996335f, 0.49437738f,  0.16054108f,  0.06498067f,  0.09253302f, 0.22458284f, 0.61012903f,  3.01489743f,  3.78202821f, -0.36904004f,  3.74748546f,-1.29734313f},
            { 3.32159237f, -0.26692729f, -0.66346964f,  3.19491486f,  0.8109639f, 0.66117829f,  2.99769447f,  3.06295853f,  3.11498052f,  3.10120005f, 0.49249256f,  0.59279257f,  3.21913644f, -0.90976952f, -0.92837079f, 3.8076155f},
            { 3.04402146f,  0.14435516f,  3.16746139f,  3.10948232f,  0.28319476f, 2.98393262f,  1.25708152f,  0.04537013f,  0.02952748f,  0.16817567f, 3.13579985f,  0.17326081f,  3.12270627f,  3.8927271f, -0.42006266f, 3.57921553f},
            { 2.70396978f,  0.42006266f,  2.39045821f,  3.16047904f, -0.17326081f, 3.14738546f, -0.16817567f, -0.02952748f, -0.04537013f, -1.25708152f, 3.29925268f, -0.28319476f,  3.17370298f,  3.11572392f, -0.14435516f, 3.23916385f},
            { 2.4755698f,  0.92837079f,  0.90976952f,  3.06404887f, -0.59279257f,-0.49249256f,  3.18198526f,  3.16820479f,  3.22022678f, 3.28549083f,-0.66117829f, -0.8109639f,  3.08827044f,  0.66346964f,  0.26692729f, 2.96159293f},
            { 1.29734313f,  2.53569985f,  0.36904004f,  2.50115709f,  3.26828788f,-0.61012903f, -0.22458284f, -0.09253302f, -0.06498067f, -0.16054108f,-0.49437738f,  3.18355181f,  2.62829147f,  0.12658023f,  2.89643782f, 2.69211733f},
            {-0.07264198f,  2.65464875f,  3.19534322f, -0.3034133f, -0.34397547f, 3.16117948f,  3.16669811f,  3.08397411f,  2.92528235f, 2.90049548f, 2.85281435f,  0.07737096f, -0.24898182f,  3.72691148f,  3.02121012f,-0.58711004f},
            {-1.36276551f, -0.28524882f,  2.85762751f,  3.23811631f, -1.06742057f,-0.34068177f, -0.2060968f, -0.05015681f,  0.10814482f, -0.06623661f,-0.21745469f, -0.48801408f,  3.41576605f,  2.89617393f, -0.60265827f, 4.32792607f},
            { 2.86855707f,  4.28839171f, -0.51054674f,  0.48366955f,  2.05662167f, 2.41914281f,  2.61354936f,  3.01356208f,  3.27874381f,  3.06222352f, 2.63902885f,  1.84423483f,  0.36950642f, -0.51106826f,  4.40049229f, 3.24835367f},
            { 2.64150461f,  1.79297684f,  3.52994684f, -1.28209322f, -0.38163755f, 0.29759972f,  0.70109251f,  0.72775196f,  0.43188339f, 0.05013007f,-0.30871293f, -0.99138863f,  4.02662981f,  3.21223375f,  1.64309418f, 0.35841557f},
            { 4.04714242f,  4.32055451f,  0.722462f,  1.25062323f,  2.38778387f, 3.28350434f,  3.56846018f,  3.73671065f,  3.80766833f,  3.61366747f, 3.2322199f,  2.79521084f,  2.25229159f,  1.76739636f,  3.88035992f, 4.30431968f}
    };

    @Test
    public void testPhaseImageWithoutFourQuadrant() {
        MriEllipsoidDatasetSimulator simulator = new MriEllipsoidDatasetSimulator();
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_1D.name()).setValue(16);
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_2D.name()).setValue(16);
        DataSetInterface dataset = simulator.simulate();

        PhaseImage process = new PhaseImage(dataset);
        Param[] params = process.getParam();
        params[0].setValue(false);
        process.execute(params);

        float[][] real = dataset.getData(0).getRealPart()[0][0];
        float[][] imag = dataset.getData(0).getImaginaryPart()[0][0];

        for (int i = 0; i < real.length; i++) {
            Assert.assertArrayEquals(String.format("Test phase image process for real part (line %d)", i),
                    PhaseImageTest.expectedPhaseWithoutFourQuadrant[i], real[i], 1e-6f);
            Assert.assertArrayEquals(String.format("Test phase image process for imaginary part (line %d)", i),
                new float[imag[i].length], imag[i], 1e-6f);
        }
    }

    @Test
    public void testPhaseImageWithFourQuadrant() {
        MriEllipsoidDatasetSimulator simulator = new MriEllipsoidDatasetSimulator();
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_1D.name()).setValue(16);
        simulator.getAcquisitionParameters().get(MriDefaultParams.ACQUISITION_MATRIX_DIMENSION_2D.name()).setValue(16);
        DataSetInterface dataset = simulator.simulate();

        PhaseImage process = new PhaseImage(dataset);
        process.execute(process.getParam());

        float[][] real = dataset.getData(0).getRealPart()[0][0];
        float[][] imag = dataset.getData(0).getImaginaryPart()[0][0];

        for (int i = 0; i < real.length; i++) {
            Assert.assertArrayEquals(String.format("Test phase image process for real part (line %d)", i),
                    PhaseImageTest.expectedPhaseWithFourQuadrant[i], real[i], 1e-6f);
            Assert.assertArrayEquals(String.format("Test phase image process for imaginary part (line %d)", i),
                    new float[imag[i].length], imag[i], 1e-6f);
        }
    }
}
